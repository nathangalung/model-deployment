# MLflow complete deployment using Kubeflow's existing MinIO
apiVersion: v1
kind: Secret
metadata:
  name: mlflow-secret
  namespace: kubeflow
type: Opaque
data:
  # Base64 encoded values - using Kubeflow's MinIO credentials
  AWS_ACCESS_KEY_ID: bWluaW8=  # 'minio' in base64
  AWS_SECRET_ACCESS_KEY: bWluaW8xMjM=  # 'minio123' in base64
  POSTGRES_PASSWORD: bWxmbG93MTIz  # 'mlflow123' in base64
---
# PostgreSQL for MLflow backend
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mlflow-postgres-pvc
  namespace: kubeflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-postgres
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow-postgres
  template:
    metadata:
      labels:
        app: mlflow-postgres
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: postgres
        image: postgres:16
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          value: mlflow_db
        - name: POSTGRES_USER
          value: mlflow
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: mlflow-postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-postgres
  namespace: kubeflow
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: mlflow-postgres
---
# MLflow Tracking Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-server
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow-server
  template:
    metadata:
      labels:
        app: mlflow-server
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: mlflow
        image: python:3.11-slim
        ports:
        - containerPort: 5000
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: POSTGRES_PASSWORD
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://minio-service.kubeflow.svc.cluster.local:9000"
        - name: AWS_S3_ADDRESSING_STYLE
          value: "path"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: AWS_SECRET_ACCESS_KEY
        command: ["sh", "-c"]
        args:
          - |
            pip install mlflow[extras]==2.8.1 psycopg2-binary boto3 && \
            # Create MLflow bucket in MinIO if it doesn't exist
            python -c "
            import boto3
            from botocore.exceptions import ClientError
            import os
            
            s3 = boto3.client(
                's3',
                endpoint_url=os.environ['MLFLOW_S3_ENDPOINT_URL'],
                aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],
                aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_KEY'],
                region_name='us-east-1'
            )
            
            try:
                s3.head_bucket(Bucket='mlflow')
                print('MLflow bucket already exists')
            except ClientError:
                s3.create_bucket(Bucket='mlflow')
                print('Created MLflow bucket')
            " && \
            mlflow server \
              --host=0.0.0.0 \
              --port=5000 \
              --backend-store-uri=postgresql+psycopg2://mlflow:${POSTGRES_PASSWORD}@mlflow-postgres:5432/mlflow_db \
              --default-artifact-root=s3://mlflow \
              --artifacts-destination=s3://mlflow \
              --serve-artifacts
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-service
  namespace: kubeflow
spec:
  selector:
    app: mlflow-server
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
# MLflow VirtualService for Istio routing
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: mlflow-vs
  namespace: kubeflow
spec:
  gateways:
  - kubeflow-gateway
  hosts:
  - "*"
  http:
  - match:
    - uri:
        prefix: /mlflow/
    rewrite:
      uri: /
    route:
    - destination:
        host: mlflow-service.kubeflow.svc.cluster.local
        port:
          number: 5000
  - match:
    - uri:
        prefix: /ajax-api/
      headers:
        referer:
          regex: ".*/mlflow/.*"
    route:
    - destination:
        host: mlflow-service.kubeflow.svc.cluster.local
        port:
          number: 5000
  - match:
    - uri:
        prefix: /static-files/
      headers:
        referer:
          regex: ".*/mlflow/.*"
    route:
    - destination:
        host: mlflow-service.kubeflow.svc.cluster.local
        port:
          number: 5000